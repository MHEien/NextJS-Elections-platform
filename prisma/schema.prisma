// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  expires_in         Int?
  ext_expires_in     Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  hostedElections Election[] @relation("ElectionManagers")
  votedElections Election[] @relation("ElectionVoters")
  sessions      Session[]
  votes         Vote[]
  status        String?    @default("pending")
  role          Role       @default(VOTER)     
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  VOTER
  MANAGER
}


model Election {
  id          String   @id @default(cuid())
  name        String
  description String?
  date      DateTime
  positions   Position[]
  campus      String
  managers    User[] @relation("ElectionManagers")
  voters      User[] @relation("ElectionVoters")
}


model Position {
  id        String   @id @default(cuid())
  name      String
  election  Election @relation(fields: [electionId], references: [id])
  electionId String
  candidates Candidate[]
}

model Candidate {
  id        String   @id @default(cuid())
  name      String
  position  Position @relation(fields: [positionId], references: [id])
  positionId String
  votes     Vote[]
}

model Vote {
  id          String   @id @default(cuid())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  voter       User      @relation(fields: [voterId], references: [id])
  voterId     String
}

